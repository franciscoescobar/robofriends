{"version":3,"sources":["components/Card/index.js","components/CardList/index.js","components/SearchBox/index.js","components/Scroll/index.js","components/ErrorBoundry/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Card","name","mail","className","alt","src","CardList","list","map","card","key","email","SearchBox","onSearchChange","text","type","placeholder","onChange","value","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","state","hasError","error","info","this","setState","React","Component","App","useState","searchText","setSearchText","setList","filteredList","setFilteredList","loading","setLoading","useEffect","filter","robot","toLowerCase","includes","fetch","then","response","json","users","event","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+MAYeA,EAVF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAR,OACT,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,6BACI,4BAAKA,GACL,2BAAIC,MCQDI,EAbE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEf,OACI,6BACKA,EAAKC,KAAI,SAAAC,GAAI,OAEN,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,KAAMA,KAAMQ,EAAKR,KAAMC,KAAMO,EAAKE,aCKvDC,EAZG,SAAC,GAAD,IAAEC,EAAF,EAAEA,eAAgBC,EAAlB,EAAkBA,KAAlB,OACd,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUJ,EACVK,MAAOJ,MCEJK,EARA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,I,mCCgBEK,E,YAnBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKL,MAAME,SACH,sDAEJG,KAAKL,MAAMN,a,GAhBCa,IAAMC,W,MCiDlBC,MA1Cf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEWF,mBAAS,IAFpB,mBAEN7B,EAFM,KAEAgC,EAFA,OAG2BH,mBAAS7B,GAHpC,mBAGNiC,EAHM,KAGQC,EAHR,OAIiBL,oBAAS,GAJ1B,mBAINM,EAJM,KAIGC,EAJH,KAmBb,OAVAC,qBAAU,WACRH,EAAgBlC,EAAKsC,QAAO,SAAAC,GAAK,OAAIA,EAAM7C,KAAK8C,cAAcC,SAASX,EAAWU,qBACjF,CAACV,IAEJO,qBAAU,WACRD,GAAW,GACXM,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAUd,EAAQc,GAAQZ,EAAgBY,GAAQV,GAAW,QACpE,IAGD,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,eAlBQ,SAACyC,GACtBhB,EAAcgB,EAAMC,OAAOrC,QAiBkBJ,KAAMuB,IAE/CK,EACA,0CACA,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEnC,KAAMiC,Q,MC1BAgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.c2d5b383.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({name, mail}) => (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n        <img alt=\"robots\" src={`https://robohash.org/${name}?200x200`}/>\n        <div>\n            <h2>{name}</h2>\n            <p>{mail}</p>\n        </div>\n    </div>\n);\n\nexport default Card;","import React from 'react'\nimport Card from '../Card';\nconst CardList = ({list}) => {\n\n    return (\n        <div>\n            {list.map(card => \n                (\n                    <Card key={card.name} name={card.name} mail={card.email}></Card>\n                )\n            )}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react'\nconst SearchBox = ({onSearchChange, text}) => (\n    <div className=\"pa2\">\n        <input \n            className=\"pa3 ba b--green bg-lightest-blue\" \n            type=\"search\" \n            placeholder=\"Search robots\"\n            onChange={onSearchChange}\n            value={text}\n        />\n    </div>\n);\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = ({children}) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react'\nclass ErrorBoundry extends React.Component  {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true});\n    }\n\n    render() {\n        if(this.props.hasError){\n            return <h1>Oops that is not good!</h1>;\n        }\n        return this.props.children;\n    }\n};\n\nexport default ErrorBoundry;","import React, {useState, useEffect} from 'react';\nimport CardList from '../CardList';\nimport SearchBox from '../SearchBox';\nimport Scroll from '../Scroll';\nimport ErrorBoundry from '../ErrorBoundry';\n\nimport \"./App.css\";\n\nfunction App() {\n  const [searchText, setSearchText] = useState(\"\");\n  const [list, setList] = useState([]);\n  const [filteredList, setFilteredList] = useState(list);\n  const [loading, setLoading] = useState(false);\n  const onSearchChange = (event) => {\n    setSearchText(event.target.value);\n  }\n\n  useEffect(() => {\n    setFilteredList(list.filter(robot => robot.name.toLowerCase().includes(searchText.toLowerCase())));\n  }, [searchText]);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {setList(users); setFilteredList(users); setLoading(false);});\n  }, []);\n  return (\n    \n    <div className=\"tc\">\n      <h1 className=\"f1\" >Robofriends</h1>\n      <SearchBox onSearchChange={onSearchChange} text={searchText}></SearchBox>\n      {\n        loading ? \n        <h1>Loading...</h1> : (\n        <Scroll>\n          <ErrorBoundry>\n            <CardList \n              list={filteredList}>\n            </CardList>\n          </ErrorBoundry>\n        </Scroll>\n        )\n      }\n      \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}